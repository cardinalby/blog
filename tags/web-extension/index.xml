<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web-Extension on Tech grumbling</title><link>https://cardinalby.github.io/blog/tags/web-extension/</link><description>Recent content in Web-Extension on Tech grumbling</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>cardinalby</copyright><lastBuildDate>Thu, 28 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cardinalby.github.io/blog/tags/web-extension/index.xml" rel="self" type="application/rss+xml"/><item><title>Google Maps Extended Routes browser extension</title><link>https://cardinalby.github.io/blog/project/google-maps-extended-routes/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/project/google-maps-extended-routes/</guid><description>The great web extension for motorbikers, cyclists and everyone who use Google Maps for planning long routes.
See the homepage üö¥ Extend routes beyond 10 points
üìè Optimize multi-stop routes for shorter travel to save time and fuel
üì± Prepare a route for mobile navigation solving &amp;ldquo;disappearing waypoints&amp;rdquo; problem
üåç Export your route to popular services: Apple Maps, TomTom Planner, Bing Maps and Yandex Maps
üíæ Download a route as GPX or KML file</description></item><item><title>The main workflow</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/9-the-main-workflow/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/9-the-main-workflow/</guid><description>We have prepared all the needed composite actions and workflows, and we are finally ready to create the main workflow that triggers the entire pipeline.
.github/workflows/publish-release-on-tag.yml :
name: Release and publish on tag on: push: tags: - &amp;#39;*.*.*&amp;#39; workflow_dispatch: jobs: build-release-publish: if: github.ref_type == &amp;#39;tag&amp;#39; runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: cardinalby/export-env-action@v1 with: envFile: &amp;#39;./.github/workflows/constants.env&amp;#39; expand: true - name: Look for an existing release id: getRelease uses: cardinalby/git-get-release-action@v1 continue-on-error: true with: tag: ${{ github.</description></item><item><title>Publish on Chrome Web Store</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/7-publish-on-chrome-web-store/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/7-publish-on-chrome-web-store/</guid><description>In this part we are going to create the workflow that will be responsible for publishing the extension on Chrome Web Store. This part is going to be a bit tricky comparing to the others.
üß± Prepare ‚ù∂ To set up Google Publish API access you need to obtain clientId, clientSecret and refreshToken from Google. These articles can help you to do that: * Using the Chrome Web Store Publish API * How to generate Google API keys</description></item><item><title>Publish on Firefox Add-ons</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/6-publish-on-firefox-addons/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/6-publish-on-firefox-addons/</guid><description>In this part we are going to create the workflow that will be responsible for publishing the extension on Firefox Add-ons marketplace.
üß± Prepare First, you need to find out your extension UUID. You can find it on your extension&amp;rsquo;s page at Add-on Developer Hub in the &amp;ldquo;Technical Details&amp;rdquo; section.
Next, follow the official documentation and obtain jwtIssuer and jwtSecret values required for accessing the API.
üîí Add these values to secrets: FF_EXTENSION_ID - UUID of your extension (e.</description></item><item><title>Publish on Edge Add-ons</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/5-publish-on-edge-addons/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/5-publish-on-edge-addons/</guid><description>In this part we are going to create the workflow for publishing the extension on Microsoft Edge Add-ons. The reason why we are starting from the least popular store is that the process is going to be the easiest one among other stores.
üß± Prepare First, you need to find the Product ID of your extension. You can find it in Developer Dashboard. Be attentive, there are also 2 other identifiers that we don&amp;rsquo;t need - Store ID and CRX ID.</description></item><item><title>Build release assets</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/4-build-release-assets/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/4-build-release-assets/</guid><description>build-assets-on-release workflow Let&amp;rsquo;s create the first workflow that utilizes build-test-pack action and builds release assets for offline distribution once a release has been published.
.github/workflows/build-assets-on-release.yml:
name: Build release assets on: release: # Creating draft releases will not trigger it types: [published] jobs: # We will add 3 jobs here... The workflow will have 3 jobs:
ensure-zip: Ensuring we have zip release asset. build-signed-crx-asset: Building crx asset. build-signed-xpi-asset: Building xpi asset. ensure-zip job The first job will find zip asset in the release or build it if not found:</description></item><item><title>Composite actions</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/3-composite-actions/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/3-composite-actions/</guid><description>In this part we will start with implementing composite actions, the base building blocks that are used in the workflows.
We save all created actions locally in the repo in .github/workflows/actions directory. Every action has own named directory and a single action.yml file in it.
build-test-pack action .github/workflows/actions/build-test-pack/action.yml :
name: &amp;#34;Build, test and pack WebExtension&amp;#34; description: &amp;#34;Builds, tests, and packs extension dir into zip file&amp;#34; inputs: doNotPackZip: description: &amp;#39;Set `true` to omit pack step&amp;#39; required: false runs: using: &amp;#34;composite&amp;#34; steps: # Add additional build and test steps here - name: Validate manifest.</description></item><item><title>Workflows diagram</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/2-workflows-diagram/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/2-workflows-diagram/</guid><description>High level overview In this part we will observe the high level architecture of the solution: the proposed workflows and the order in that they are called. We will also find duplicated steps and extract them to the composite actions.
Workflows and events Let&amp;rsquo;s take a look at the vertical Ghant diagram of the pipeline triggered by pushing a tag.
The main publish-release-on-tag workflow is triggered when a user pushes a tag.</description></item><item><title>Introduction. Constants</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/1-introduction/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/1-introduction/</guid><description>Introduction In this article, I&amp;rsquo;m going to share my approach of preparing a complete CI/CD solution for building and publishing a browser extension (WebExtension) based on GitHub Actions:
Reusable building and testing pipeline. Releasing and building artifacts for offline distribution. Publishing an extension on Chrome Web Store, Firefox Add-ons and Edge Add-ons stores. The described workflows are based on the existing and tested workflows for my &amp;ldquo;Memrise Audio Uploader&amp;rdquo; extension.</description></item><item><title>Memrise Audio Uploader</title><link>https://cardinalby.github.io/blog/project/memrise-audio-uploader/</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/project/memrise-audio-uploader/</guid><description>Memrise Audio Uploader is a Chrome extension which allows you to upload sounds of words and phrases pronunciation from soundoftext.com to memrise.com course.
Check out the source code https://github.com/cardinalby/memrise-audio-uploader
Install from the stores Chrome Web Store
Firefox Add-ons
To download the offline versions please go to the Releases page.
Screenshots</description></item></channel></rss>