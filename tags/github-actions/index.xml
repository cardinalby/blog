<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github-Actions on Tech grumbling</title><link>https://cardinalby.github.io/blog/tags/github-actions/</link><description>Recent content in Github-Actions on Tech grumbling</description><generator>Hugo</generator><language>en-us</language><copyright>cardinalby</copyright><lastBuildDate>Thu, 17 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cardinalby.github.io/blog/tags/github-actions/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript GitHub Action packing and releasing</title><link>https://cardinalby.github.io/blog/post/github-actions/js-action-packing-and-releasing/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/js-action-packing-and-releasing/</guid><description>&lt;h2 id="-overview">🔭 Overview&lt;/h2>
&lt;p>In this article I want to share some undocumented details of creating &lt;strong>JavaScript GitHub Actions&lt;/strong> related to the using of &lt;strong>ncc&lt;/strong> packing tool.&lt;/p>
&lt;p>It&amp;rsquo;s not just a step-by-step instruction, but the story describing the problem, the proposed approach and the reasoning behind it.&lt;/p>
&lt;p>If you are just looking for a quick code example, jump to &lt;a href="https://github.com/cardinalby/git-get-release-action/blob/master/.github/workflows/build-pack.yml" target="_blank">this one&lt;/a> and come back for an explanation 🙂&lt;/p>
&lt;h2 id="-basics-that-you-already-know">🎬 Basics that you already know&lt;/h2>
&lt;p>The basic approach is pretty easy and described in GitHub documentation &lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-javascript-action" target="_blank">here&lt;/a>. Also, there are simple &lt;a href="https://github.com/actions/javascript-action" target="_blank">JavaScript&lt;/a> and &lt;a href="https://github.com/actions/typescript-action" target="_blank">TypeScript&lt;/a> action examples provided by GitHub. I will not focus on it here.&lt;/p></description></item><item><title>The main workflow</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/9-the-main-workflow/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/9-the-main-workflow/</guid><description>&lt;p>We have prepared all the needed composite actions and workflows, and we are finally ready to create the main workflow that triggers the entire pipeline.&lt;/p>
&lt;p>&lt;img src="images/posts/github-actions/webext/the-main-workflow.png" alt="The main workflow" />&lt;/p>
&lt;p>&lt;em>.github/workflows/publish-release-on-tag.yml&lt;/em> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Release and publish on tag&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;*.*.*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">workflow_dispatch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">build-release-publish&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github.ref_type == &amp;#39;tag&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cardinalby/export-env-action@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">envFile&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;./.github/workflows/constants.env&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">expand&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Look for an existing release&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">getRelease&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cardinalby/git-get-release-action@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">continue-on-error&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ github.ref_name }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GITHUB_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ github.token }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build, test and pack to zip&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">buildPack&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps.getRelease.outcome != &amp;#39;success&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./.github/workflows/actions/build-test-pack&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Create Release&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">createRelease&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps.getRelease.outcome != &amp;#39;success&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ncipollo/release-action@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">draft&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;true&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Upload zip asset to the release&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps.getRelease.outcome != &amp;#39;success&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/upload-release-asset@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GITHUB_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">upload_url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ steps.createRelease.outputs.upload_url }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">asset_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ env.ZIP_FILE_PATH }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">asset_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ env.ZIP_FILE_NAME }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">asset_content_type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">application/zip&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Should trigger build-assets-on-release.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Publish release&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps.getRelease.outcome != &amp;#39;success&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eregon/publish-release@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GITHUB_TOKEN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.WORKFLOWS_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">release_id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ steps.createRelease.outputs.id }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Publish on Chrome Webstore&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">benc-uk/workflow-dispatch@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;!contains(github.event.head_commit.message, &amp;#39;[skip chrome]&amp;#39;)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">workflow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">publish-on-chrome-web-store&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.WORKFLOWS_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">wait-for-completion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Publish on Firefox Add-ons&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">benc-uk/workflow-dispatch@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;!contains(github.event.head_commit.message, &amp;#39;[skip firefox]&amp;#39;)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">workflow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">publish-on-firefox-add-ons&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.WORKFLOWS_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">wait-for-completion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Publish on Edge Add-ons&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">benc-uk/workflow-dispatch@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;!contains(github.event.head_commit.message, &amp;#39;[skip edge]&amp;#39;)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">workflow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">publish-on-edge-add-ons&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.WORKFLOWS_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">wait-for-completion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>The workflow can be triggered by pushing &lt;em>&lt;em>.&lt;/em>.*&lt;/em> tag or by &lt;em>workflow_dispatch&lt;/em> event.&lt;/li>
&lt;li>To perform the work we need a tag to create a release for, that&amp;rsquo;s why we add &lt;code>if: github.ref_type == 'tag'&lt;/code> condition for the job to prevent running on branches.&lt;/li>
&lt;li>We use &lt;a href="https://github.com/cardinalby/git-get-release-action" target="_blank">git-get-release-action&lt;/a> to find a release for the tag. &lt;code>continue-on-error: true&lt;/code> prevents the job from failing if release not found.&lt;/li>
&lt;li>If a release not found, we:
&lt;ul>
&lt;li>Call &lt;em>&lt;strong>build-test-pack&lt;/strong>&lt;/em> composite action to build &lt;strong>zip&lt;/strong> file.&lt;/li>
&lt;li>Call &lt;a href="https://github.com/ncipollo/release-action" target="_blank">release-action&lt;/a> to create a draft release. This doesn&amp;rsquo;t trigger &lt;code>on: release&lt;/code> event.&lt;/li>
&lt;li>Call &lt;a href="https://github.com/actions/upload-release-asset" target="_blank">upload-release-asset&lt;/a> to upload &lt;strong>zip&lt;/strong> asset to the release (to be used by &lt;em>&lt;strong>publish-on-chrome-web-store&lt;/strong>&lt;/em> and &lt;em>&lt;strong>publish-on-firefox-add-ons&lt;/strong>&lt;/em> workflows later).&lt;/li>
&lt;li>Call &lt;a href="https://github.com/eregon/publish-release" target="_blank">eregon/publish-release&lt;/a> to publish the draft release. This triggers &lt;code>on: release&lt;/code> event and &lt;a href="https://cardinalby.github.io/blog/post/github-actions/webext/4-build-release-assets/">build-assets-on-release&lt;/a> workflow.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>We use &lt;a href="https://github.com/benc-uk/workflow-dispatch" target="_blank">benc-uk/workflow-dispatch&lt;/a> action to asynchronously dispatch:
&lt;ul>
&lt;li>&lt;a href="https://cardinalby.github.io/blog/post/github-actions/webext/7-publish-on-chrome-web-store/">publish-on-chrome-web-store&lt;/a> workflow (if the commit message doesn&amp;rsquo;t contain &lt;code>[skip chrome]&lt;/code> text).&lt;/li>
&lt;li>&lt;a href="./5-publish-on-firefox-add-ons.md">publish-on-firefox-add-ons&lt;/a> workflow (if the commit message doesn&amp;rsquo;t contain &lt;code>[skip firefox]&lt;/code> text).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="-thank-you-for-reading">👏 Thank you for reading&lt;/h2>
&lt;p>Finally, we are done! You can try out your first deployment by pushing a new &lt;em>&lt;em>.&lt;/em>.*&lt;/em> tag to the repo (don&amp;rsquo;t forget to check the extension version in &lt;em>manifest.json&lt;/em>).&lt;/p></description></item><item><title>Don't let Google refresh token expire</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/8-google-api-refresh-token-expiration/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/8-google-api-refresh-token-expiration/</guid><description>&lt;p>In this part we will finish setting up workflows related to publishing the extension on Google Web Store and create the workflow that isn&amp;rsquo;t shown on &lt;a href="https://cardinalby.github.io/blog/post/github-actions/webext/2-workflows-diagram/">the workflow diagram&lt;/a> because it stays aside and isn&amp;rsquo;t included to the main pipeline.&lt;/p>
&lt;p>Dealing with Google API credentials we should be aware of the fact that, according to &lt;a href="https://developers.google.com/identity/protocols/oauth2#expiration" target="_blank">Google&amp;rsquo;s guide&lt;/a>, refresh token (which we use in the workflow from the previous part) might stop working if it has not been used for six months. And I can assure you, it happens 😞.&lt;/p></description></item><item><title>Publish on Chrome Web Store</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/7-publish-on-chrome-web-store/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/7-publish-on-chrome-web-store/</guid><description>&lt;p>In this part we are going to create the workflow that will be responsible for publishing the extension
on Chrome Web Store. This part is going to be a bit tricky comparing to the others.&lt;/p>
&lt;h2 id="-prepare">🧱 Prepare&lt;/h2>
&lt;p>❶ To set up Google Publish API access you need to obtain &lt;code>clientId&lt;/code>, &lt;code>clientSecret&lt;/code> and &lt;code>refreshToken&lt;/code> from Google. These articles can help you to do that:
* &lt;a href="https://developer.chrome.com/webstore/using_webstore_api" target="_blank">Using the Chrome Web Store Publish API&lt;/a>
* &lt;a href="https://github.com/DrewML/chrome-webstore-upload/blob/master/How%20to%20generate%20Google%20API%20keys.md" target="_blank">How to generate Google API keys&lt;/a>&lt;/p></description></item><item><title>Publish on Firefox Add-ons</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/6-publish-on-firefox-addons/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/6-publish-on-firefox-addons/</guid><description>&lt;p>In this part we are going to create the workflow that will be responsible for publishing the extension
on Firefox Add-ons marketplace.&lt;/p>
&lt;h2 id="-prepare">🧱 Prepare&lt;/h2>
&lt;p>First, you need to find out your extension UUID. You can find it on your extension&amp;rsquo;s page at Add-on Developer Hub in the &amp;ldquo;Technical Details&amp;rdquo; section.&lt;/p>
&lt;p>Next, follow the &lt;a href="https://addons-server.readthedocs.io/en/latest/topics/api/auth.html" target="_blank">official documentation&lt;/a> and obtain &lt;code>jwtIssuer&lt;/code> and &lt;code>jwtSecret&lt;/code> values required for accessing the API.&lt;/p>
&lt;h2 id="-add-these-values-to-secrets">🔒 Add these values to &lt;strong>&lt;em>secrets&lt;/em>&lt;/strong>:&lt;/h2>
&lt;ul>
&lt;li>&lt;code>FF_EXTENSION_ID &lt;/code> - UUID of your extension (e.g. &lt;code>{c23c69a7-f889-447c-9d6b-7694be8035bc}&lt;/code>)&lt;/li>
&lt;li>&lt;code>FF_JWT_ISSUER &lt;/code>&lt;/li>
&lt;li>&lt;code>FF_JWT_SECRET &lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="publish-on-firefox-add-ons-workflow">&lt;em>publish-on-firefox-add-ons&lt;/em> workflow&lt;/h2>
&lt;p>The workflow will have the only trigger: &lt;em>workflow_dispatch&lt;/em> event. It can be dispatched:&lt;/p></description></item><item><title>Publish on Edge Add-ons</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/5-publish-on-edge-addons/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/5-publish-on-edge-addons/</guid><description>&lt;p>In this part we are going to create the workflow for publishing the extension on Microsoft Edge Add-ons. The reason why we are starting from the least popular store is that the process is going to be the easiest one among other stores.&lt;/p>
&lt;h2 id="-prepare">🧱 Prepare&lt;/h2>
&lt;p>First, you need to find the &lt;em>Product ID&lt;/em> of your extension. You can find it in &lt;a href="https://partner.microsoft.com/en-us/dashboard/microsoftedge/overview" target="_blank">Developer Dashboard&lt;/a>. Be attentive, there are also 2 other identifiers that we don&amp;rsquo;t need - Store ID and CRX ID.&lt;/p></description></item><item><title>Build release assets</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/4-build-release-assets/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/4-build-release-assets/</guid><description>&lt;h1 id="build-assets-on-release-workflow">&lt;em>build-assets-on-release&lt;/em> workflow&lt;/h1>
&lt;p>Let&amp;rsquo;s create the first workflow that utilizes &lt;em>&lt;strong>build-test-pack&lt;/strong>&lt;/em> action and builds release assets for offline distribution once a release has been published.&lt;/p>
&lt;p>&lt;img src="images/posts/github-actions/webext/build-assets-on-release.png" alt="build-assets-on-release workflow" />&lt;/p>
&lt;p>&lt;em>.github/workflows/build-assets-on-release.yml:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build release assets&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">release&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Creating draft releases will not trigger it&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">types&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">published]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># We will add 3 jobs here...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The workflow will have 3 jobs:&lt;/p>
&lt;ol>
&lt;li>&lt;em>ensure-zip&lt;/em>: Ensuring we have &lt;strong>zip&lt;/strong> release asset.&lt;/li>
&lt;li>&lt;em>build-signed-crx-asset&lt;/em>: Building &lt;strong>crx&lt;/strong> asset.&lt;/li>
&lt;li>&lt;em>build-signed-xpi-asset&lt;/em>: Building &lt;strong>xpi&lt;/strong> asset.&lt;/li>
&lt;/ol>
&lt;h2 id="ensure-zip-job">&lt;em>ensure-zip&lt;/em> job&lt;/h2>
&lt;p>The first job will find &lt;strong>zip&lt;/strong> asset in the release or build it if not found:&lt;/p></description></item><item><title>Composite actions</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/3-composite-actions/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/3-composite-actions/</guid><description>&lt;p>In this part we will start with implementing composite actions, the base building blocks that are used in the workflows.&lt;/p>
&lt;p>We save all created actions locally in the repo in &lt;code>.github/workflows/actions&lt;/code> directory. Every action has own named directory and a single &lt;em>action.yml&lt;/em> file in it.&lt;/p>
&lt;h1 id="build-test-pack-action">&lt;em>build-test-pack&lt;/em> action&lt;/h1>
&lt;p>&lt;em>.github/workflows/actions/build-test-pack/action.yml&lt;/em> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Build, test and pack WebExtension&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Builds, tests, and packs extension dir into zip file&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">inputs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">doNotPackZip&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Set `true` to omit pack step&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">required&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">runs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">using&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;composite&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Add additional build and test steps here&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Validate manifest.json of the extension&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cardinalby/schema-validator-action@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ env.EXTENSION_DIR }}manifest.json&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">schema&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;https://json.schemastore.org/webextension.json&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pack directory to zip&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">inputs.doNotPackZip != &amp;#39;true&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cardinalby/webext-buildtools-pack-extension-dir-action@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">extensionDir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ env.EXTENSION_DIR }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">zipFilePath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ env.ZIP_FILE_PATH }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>It can pack or not pack &lt;strong>zip&lt;/strong> depending on the input.&lt;/li>
&lt;li>My extension doesn&amp;rsquo;t have any build and test steps, so I put &lt;em>manifest.json&lt;/em> schema validation instead of actual build and test steps. This post doesn&amp;rsquo;t cover the topic of building and testing WebExtensions. But it&amp;rsquo;s the place where these steps should be.&lt;/li>
&lt;li>The action needs &lt;em>ZIP_FILE_PATH&lt;/em> and &lt;em>EXTENSION_DIR&lt;/em> environment variables to be set in the workflow.&lt;/li>
&lt;/ul>
&lt;h1 id="get-zip-asset-action">&lt;em>get-zip-asset&lt;/em> action&lt;/h1>
&lt;p>The next composite action we are going to create will be used in &lt;strong>&lt;em>publish-on-chrome-webstore&lt;/em>&lt;/strong> and &lt;strong>&lt;em>publish-on-firefox-add-ons&lt;/em>&lt;/strong> workflows. These workflows can be triggered:&lt;/p></description></item><item><title>Workflows diagram</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/2-workflows-diagram/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/2-workflows-diagram/</guid><description>&lt;h1 id="high-level-overview">High level overview&lt;/h1>
&lt;p>In this part we will observe the high level architecture of the solution: the proposed workflows and the order in that they are called. We will also find duplicated steps and extract them to the composite actions.&lt;/p>
&lt;h2 id="workflows-and-events">Workflows and events&lt;/h2>
&lt;p>Let&amp;rsquo;s take a look at the vertical Ghant diagram of the pipeline triggered by pushing a tag.&lt;/p>
&lt;p>&lt;img src="images/posts/github-actions/webext/workflows-ghant-vertical.png" alt="Vertical Ghant diagram" />&lt;/p>
&lt;ul>
&lt;li>The main &lt;em>&lt;strong>publish-release-on-tag&lt;/strong>&lt;/em> workflow is triggered when a user pushes a tag.&lt;/li>
&lt;li>It triggers &lt;em>&lt;strong>build-assets-on-release&lt;/strong>&lt;/em> implicitly by creating a release.&lt;/li>
&lt;li>The main workflow also explicitly triggers (emitting &lt;code>workflow_dispatch&lt;/code>) event 3 other workflows responsible for publishing an extension on different stores.&lt;/li>
&lt;/ul>
&lt;p>Important thing here is that all of these workflows can be triggered by user directly, without triggering the main workflow:&lt;/p></description></item><item><title>Introduction. Constants</title><link>https://cardinalby.github.io/blog/post/github-actions/webext/1-introduction/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/webext/1-introduction/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this article, I&amp;rsquo;m going to share my approach of preparing a complete CI/CD solution for building and publishing a browser extension (&lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions" target="_blank">WebExtension&lt;/a>) based on &lt;a href="https://docs.github.com/en/actions" target="_blank">GitHub Actions&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>Reusable building and testing pipeline.&lt;/li>
&lt;li>Releasing and building artifacts for offline distribution.&lt;/li>
&lt;li>Publishing an extension on &lt;a href="https://chrome.google.com/webstore" target="_blank">Chrome Web Store&lt;/a>, &lt;a href="https://addons.mozilla.org/en-US/firefox/" target="_blank">Firefox Add-ons&lt;/a> and &lt;a href="https://microsoftedge.microsoft.com/addons/" target="_blank">Edge Add-ons&lt;/a> stores.&lt;/li>
&lt;/ul>
&lt;p>The described workflows are based on the existing and tested workflows for my &lt;a href="https://chrome.google.com/webstore/detail/memrise-audio-uploader/fonhjbpoimjmgfgbboichngpjlmilbmk?hl=en" target="_blank">&amp;ldquo;Memrise Audio Uploader&amp;rdquo;&lt;/a> extension.&lt;/p>
&lt;p>From this series of posts you can learn:&lt;/p></description></item><item><title>GitHub Actions integration testing lib</title><link>https://cardinalby.github.io/blog/project/github-actions-testing-lib/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/project/github-actions-testing-lib/</guid><description>&lt;h2 id="check-out">Check out&lt;/h2>
&lt;p>&lt;a href="https://github.com/cardinalby/github-action-ts-run-api" target="_blank">https://github.com/cardinalby/github-action-ts-run-api&lt;/a>&lt;/p>
&lt;h2 id="purpose">Purpose&lt;/h2>
&lt;p>🔶 Executing your GitHub action &lt;strong>locally&lt;/strong> (or at any other environment).&lt;/p>
&lt;p>🔶 Writing integration and functional tests, run them locally and at CI.&lt;/p>
&lt;p>🔶 Having a short feedback loop without pushing and checking it behaviour at
real GitHub runners every time.&lt;/p>
&lt;h2 id="features">Features&lt;/h2>
&lt;p>✅ Supports executing JavaScript and Docker actions.&lt;/p>
&lt;p>✅ Tested under Windows, Linux and macOS locally and on GitHub hosted runners.&lt;/p>
&lt;p>✅ Works well with Docker Desktop under Windows and macOS (for Docker actions).&lt;/p></description></item><item><title>DRY: reusing code in GitHub Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/dry-reusing-code-in-github-actions/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/dry-reusing-code-in-github-actions/</guid><description>&lt;p>In this post I want to make a quick overview of the approaches of reusing steps of your workflow to avoid duplication of the same steps across different workflows or jobs.&lt;/p>
&lt;h2 id="-reusing-workflows">🔸 Reusing workflows&lt;/h2>
&lt;p>The obvious option is using the &lt;a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows" target="_blank">&amp;ldquo;Reusable workflows&amp;rdquo; feature&lt;/a> that allows you to extract some steps into a separate &amp;ldquo;reusable&amp;rdquo; workflow and call this workflow as a job in other workflows.&lt;/p>
&lt;h3 id="-takeaways">🥡 Takeaways:&lt;/h3>
&lt;ul>
&lt;li>Nested reusable workflow calls are allowed (up to 4 levels) while loops are not permitted.&lt;/li>
&lt;li>Env variables are not inherited. Secrets can be inherited by using special &lt;code>secrets: inherit&lt;/code> job param.&lt;/li>
&lt;li>It&amp;rsquo;s not convenient if you need to extract and reuse several steps inside one job.&lt;/li>
&lt;li>Since it runs as a separate job, you have to use &lt;a href="https://docs.github.com/en/actions/advanced-guides/storing-workflow-data-as-artifacts" target="_blank">build artifacts&lt;/a> to share files between a reusable workflow and your main workflow.&lt;/li>
&lt;li>You can call a reusable workflow in synchronous or asynchronous manner (managing it by jobs ordering using &lt;code>needs&lt;/code> keys).&lt;/li>
&lt;li>A reusable workflow can define outputs that extract outputs/outcomes from executed steps. They can be easily used to pass data to the &amp;ldquo;main&amp;rdquo; workflow.&lt;/li>
&lt;/ul>
&lt;h2 id="-dispatched-workflows">🔸 Dispatched workflows&lt;/h2>
&lt;p>Another possibility that GitHub gives us is &lt;a href="https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow" target="_blank">workflow_dispatch&lt;/a> event that can trigger a workflow run. Simply put, you can trigger a workflow manually or through GitHub API and provide its inputs.&lt;/p></description></item><item><title>System testing of GitHub Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/4-system-testing-of-github-actions/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/4-system-testing-of-github-actions/</guid><description>&lt;p>It&amp;rsquo;s the last and the shortest part of the series. Testing the whole action as a &lt;a href="https://en.wikipedia.org/wiki/Black-box_testing" target="_blank">black box&lt;/a> can be done in 2 ways (as far as I can see).&lt;/p>
&lt;h1 id="github-action-ts-run-api-again">github-action-ts-run-api again&lt;/h1>
&lt;p>Use the same &lt;a href="https://github.com/cardinalby/github-action-ts-run-api" target="_blank">tool&lt;/a> as for integration test, but run tests against the whole action.&lt;/p>
&lt;h1 id="use-act-tool">Use &lt;em>Act&lt;/em> tool&lt;/h1>
&lt;p>This approach implies that you should create special testing workflows that can be naturally run on GitHub Actions runner or can be run locally using &lt;a href="https://github.com/nektos/act" target="_blank">Act&lt;/a>.&lt;/p></description></item><item><title>Testing of Docker Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/3-testing-of-docker-actions/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/3-testing-of-docker-actions/</guid><description>&lt;p>In this part I&amp;rsquo;m going to tell about approaches that can be used to test a Docker container Action.&lt;/p>
&lt;h1 id="unit-tests">Unit tests&lt;/h1>
&lt;p>An approach here depends on what programming language you use inside a container. Each of them has own testing libraries that can be used to test an application in the container.&lt;/p>
&lt;p>If you use bare bash script, you can divide a single &lt;em>entrypoint.sh&lt;/em> file into the several small scripts considering them as units and testing separately.&lt;/p></description></item><item><title>Testing of JavaScript Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/2-testing-of-js-actions/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/2-testing-of-js-actions/</guid><description>&lt;p>Let&amp;rsquo;s talk about JavaScript GitHub Actions and approaches that we can apply on the different levels of testing.&lt;/p>
&lt;h1 id="unit-tests">Unit tests&lt;/h1>
&lt;p>From my point of view, unit testing of Actions doesn&amp;rsquo;t have any differences from testing any other JavaScript code. In most of the examples of Actions available on the GitHub Marketplace authors don&amp;rsquo;t care about &lt;a href="https://github.com/mawrkus/js-unit-testing-guide" target="_blank">writing testable code&lt;/a>. But nothing prevents you from extracting abstractions and following &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" target="_blank">The Dependency Inversion Principle&lt;/a> which will allow you to easily mock dependencies (such as &lt;code>@actions/core&lt;/code> , &lt;code>@actions/github&lt;/code>, &lt;code>@actions/exec&lt;/code> packages).&lt;/p></description></item><item><title>Testing of GitHub Actions. Intro</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/1-testing-of-github-actions-intro/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/1-testing-of-github-actions-intro/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this post series I want to share my experience and approaches with testing of GitHub Actions. Not using them to test your application, but test actions itself. I will mostly talk about testing of individual actions, not workflows.&lt;/p>
&lt;p>&lt;strong>Individual actions&lt;/strong> (steps) are &amp;ldquo;bricks&amp;rdquo; that workflows are built from, and we can consider testing them as unit testing of workflows.&lt;/p>
&lt;p>&lt;strong>One of the problems&lt;/strong> of GitHub Actions as cloud-based service is that there is no out of the box way of test them locally. Also, support in developing tools is poor comparing to mainstream programming languages. These factors lead to the high errors rate and long feedback loop to find and fix these errors.&lt;/p></description></item><item><title>GitHub Actions: implementing deferred steps</title><link>https://cardinalby.github.io/blog/post/github-actions/implementing-deferred-steps/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/implementing-deferred-steps/</guid><description>&lt;h2 id="-github-actions-can-do-everything-but-immediately">⚡️ GitHub Actions can do everything&amp;hellip; but immediately&lt;/h2>
&lt;p>Sometimes you can’t finish your CI/CD job in a single run: you have to wait for some event or until an external long-running process finishes. To do that, we need a possibility to &lt;em>delay/postpone/defer&lt;/em> some steps and repeat them (probably multiple times until they succeed).&lt;/p>
&lt;p>&lt;em>For example, I faced the issue with WebExtension &lt;a href="https://cardinalby.github.io/blog/post/github-actions/webext/1-introduction/">publishing&lt;/a>. After calling the Web Store API I have to wait up to week or two until my extension gets reviewed and only then I will be able to download published and packed file and add it to a GitHub release.&lt;/em>&lt;/p></description></item></channel></rss>