<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Tech grumbling</title><link>https://cardinalby.github.io/blog/tags/docker/</link><description>Recent content in Docker on Tech grumbling</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>cardinalby</copyright><lastBuildDate>Tue, 18 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cardinalby.github.io/blog/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Actions integration testing lib</title><link>https://cardinalby.github.io/blog/project/github-actions-testing-lib/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/project/github-actions-testing-lib/</guid><description>Check out https://github.com/cardinalby/github-action-ts-run-api
Purpose ðŸ”¶ Executing your GitHub action locally (or at any other environment).
ðŸ”¶ Writing integration and functional tests, run them locally and at CI.
ðŸ”¶ Having a short feedback loop without pushing and checking it behaviour at real GitHub runners every time.
Features âœ… Supports executing JavaScript and Docker actions.
âœ… Tested under Windows, Linux and macOS locally and on GitHub hosted runners.
âœ… Works well with Docker Desktop under Windows and macOS (for Docker actions).</description></item><item><title>Testing of Docker Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/3-testing-of-docker-actions/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/3-testing-of-docker-actions/</guid><description>In this part I&amp;rsquo;m going to tell about approaches that can be used to test a Docker container Action.
Unit tests An approach here depends on what programming language you use inside a container. Each of them has own testing libraries that can be used to test an application in the container.
If you use bare bash script, you can divide a single entrypoint.sh file into the several small scripts considering them as units and testing separately.</description></item></channel></rss>