<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>js on Tech grumbling</title><link>https://cardinalby.github.io/blog/tags/js/</link><description>Recent content in js on Tech grumbling</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>cardinalby</copyright><lastBuildDate>Thu, 17 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cardinalby.github.io/blog/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript GitHub Action packing and releasing</title><link>https://cardinalby.github.io/blog/post/github-actions/js-action-packing-and-releasing/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/js-action-packing-and-releasing/</guid><description>ðŸ”­ Overview In this article I want to share some undocumented details of creating JavaScript GitHub Actions related to the using of ncc packing tool.
It&amp;rsquo;s not just a step-by-step instruction, but the story describing the problem, the proposed approach and the reasoning behind it.
If you are just looking for a quick code example, jump to this one and come back for an explanation ðŸ™‚
ðŸŽ¬ Basics that you already know The basic approach is pretty easy and described in GitHub documentation here.</description></item><item><title>GitHub Actions integration testing lib</title><link>https://cardinalby.github.io/blog/project/github-actions-testing-lib/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/project/github-actions-testing-lib/</guid><description>Check out https://github.com/cardinalby/github-action-ts-run-api
Purpose ðŸ”¶ Executing your GitHub action locally (or at any other environment).
ðŸ”¶ Writing integration and functional tests, run them locally and at CI.
ðŸ”¶ Having a short feedback loop without pushing and checking it behaviour at real GitHub runners every time.
Features âœ… Supports executing JavaScript and Docker actions.
âœ… Tested under Windows, Linux and macOS locally and on GitHub hosted runners.
âœ… Works well with Docker Desktop under Windows and macOS (for Docker actions).</description></item><item><title>Testing of JavaScript Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/2-testing-of-js-actions/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/2-testing-of-js-actions/</guid><description>Let&amp;rsquo;s talk about JavaScript GitHub Actions and approaches that we can apply on the different levels of testing.
Unit tests From my point of view, unit testing of Actions doesn&amp;rsquo;t have any differences from testing any other JavaScript code. In most of the examples of Actions available on the GitHub Marketplace authors don&amp;rsquo;t care about writing testable code. But nothing prevents you from extracting abstractions and following The Dependency Inversion Principle which will allow you to easily mock dependencies (such as @actions/core , @actions/github, @actions/exec packages).</description></item><item><title>Memrise Audio Uploader</title><link>https://cardinalby.github.io/blog/project/memrise-audio-uploader/</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/project/memrise-audio-uploader/</guid><description>Memrise Audio Uploader is a Chrome extension which allows you to upload sounds of words and phrases pronunciation from soundoftext.com to memrise.com course.
Check out the source code https://github.com/cardinalby/memrise-audio-uploader
Install from the stores Chrome Web Store
Firefox Add-ons
To download the offline versions please go to the Releases page.
Screenshots</description></item></channel></rss>