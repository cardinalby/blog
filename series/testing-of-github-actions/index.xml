<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing of GitHub Actions on Tech grumbling</title><link>https://cardinalby.github.io/blog/series/testing-of-github-actions/</link><description>Recent content in Testing of GitHub Actions on Tech grumbling</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>cardinalby</copyright><lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cardinalby.github.io/blog/series/testing-of-github-actions/index.xml" rel="self" type="application/rss+xml"/><item><title>System testing of GitHub Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/4-system-testing-of-github-actions/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/4-system-testing-of-github-actions/</guid><description>It&amp;rsquo;s the last and the shortest part of the series. Testing the whole action as a black box can be done in 2 ways (as far as I can see).
github-action-ts-run-api again Use the same tool as for integration test, but run tests against the whole action.
Use Act tool This approach implies that you should create special testing workflows that can be naturally run on GitHub Actions runner or can be run locally using Act.</description></item><item><title>Testing of Docker Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/3-testing-of-docker-actions/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/3-testing-of-docker-actions/</guid><description>In this part I&amp;rsquo;m going to tell about approaches that can be used to test a Docker container Action.
Unit tests An approach here depends on what programming language you use inside a container. Each of them has own testing libraries that can be used to test an application in the container.
If you use bare bash script, you can divide a single entrypoint.sh file into the several small scripts considering them as units and testing separately.</description></item><item><title>Testing of JavaScript Actions</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/2-testing-of-js-actions/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/2-testing-of-js-actions/</guid><description>Let&amp;rsquo;s talk about JavaScript GitHub Actions and approaches that we can apply on the different levels of testing.
Unit tests From my point of view, unit testing of Actions doesn&amp;rsquo;t have any differences from testing any other JavaScript code. In most of the examples of Actions available on the GitHub Marketplace authors don&amp;rsquo;t care about writing testable code. But nothing prevents you from extracting abstractions and following The Dependency Inversion Principle which will allow you to easily mock dependencies (such as @actions/core , @actions/github, @actions/exec packages).</description></item><item><title>Testing of GitHub Actions. Intro</title><link>https://cardinalby.github.io/blog/post/github-actions/testing/1-testing-of-github-actions-intro/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://cardinalby.github.io/blog/post/github-actions/testing/1-testing-of-github-actions-intro/</guid><description>Introduction In this post series I want to share my experience and approaches with testing of GitHub Actions. Not using them to test your application, but test actions itself. I will mostly talk about testing of individual actions, not workflows.
Individual actions (steps) are &amp;ldquo;bricks&amp;rdquo; that workflows are built from, and we can consider testing them as unit testing of workflows.
One of the problems of GitHub Actions as cloud-based service is that there is no out of the box way of test them locally.</description></item></channel></rss>